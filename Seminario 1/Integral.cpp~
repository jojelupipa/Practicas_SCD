#include <iostream>
using namespace std;

const int MUESTRAS = 9699690; // Mínimo común múltiplo de todos los
			  // números primos hasta el 19 para
			  // asegurarnos que sea múltiplo del número
			  // de hebras que elijamos.
double funcion_hebra(long ih, int) {
  for(int i = ih; i < MUESTRAS; i+=);
}

double f( double x ) {
  return 4.0/(1+x*x);
}

int main(int argc, char* argv[]) {
  
  if(argc != 2) {
  cout << "Error de sintáxis. Uso correcto: ./ejecutable <n_hebras_multiplo_de_2>" << endl; 
  return 1;
}
  
  int hebras = atoi(argv[1]);

  
  
}
  

  // La ejecución secuencial siguiendo el ejemplo era la siguiente

  /*
    const long m = ..., n = ...; // el valor m es alto (del orden de millones)
    // implementa función f

    double f( double x ) {
    return 4.0/(1+x*x) ;
    //
    f ( x ) = 4/ ( 1 + x 2 )
    }
    // calcula la integral de forma secuencial, devuelve resultado:
    double calcular_integral_secuencial( long m ) // m == núm. muestras
    {
    double suma = 0.0 ;
    // inicializar suma
    for( long i = 0 ; i < m ; i++ )
    // para cada i entre 0 y m − 1:
    suma += f( (i+double(0.5))/m );
    // añadir f ( x i ) a la suma actual
    return suma/m ;
    // devolver valor promedio de f
    }
  */
